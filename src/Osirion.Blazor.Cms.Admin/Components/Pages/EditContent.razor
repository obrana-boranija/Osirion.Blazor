@page "/admin/content/edit"
@page "/admin/content/edit/{Path}"
@using Osirion.Blazor.Cms.Admin.Components
@using Osirion.Blazor.Cms.Admin.Components.Editor
@using Osirion.Blazor.Cms.Admin.Models
@using Osirion.Blazor.Cms.Admin.Services
@using Osirion.Blazor.Cms.Models
@inherits Osirion.Blazor.Components.OsirionComponentBase
@inject IGitHubAdminService GitHubService
@inject CmsAdminState AdminState
@inject NavigationManager NavigationManager

<AdminPage Title="Edit Content" Subtitle="Content Editor">
@*     <BreadcrumbItems>
        @(new AdminLayout.BreadcrumbItem("Dashboard", "/admin"))
        @(new AdminLayout.BreadcrumbItem("Content", "/admin/content"))
        @(new AdminLayout.BreadcrumbItem(GetPageTitle()))
    </BreadcrumbItems> *@
    
    <div class="osirion-admin-edit-content">
        @if (IsLoading)
        {
            <div class="osirion-admin-loading">
                <span class="osirion-admin-loading-spinner"></span>
                <span>Loading content...</span>
            </div>
        }
        else if (AdminState.EditingPost == null || !AdminState.IsEditing)
        {
            <div class="osirion-admin-empty">
                <p>No content found for editing. Select a file from the content browser or create a new post.</p>
                <button type="button"
                        class="osirion-admin-button osirion-admin-button-primary"
                        @onclick="CreateNewPost">
                    Create New Post
                </button>
                <button type="button"
                        class="osirion-admin-button osirion-admin-button-secondary"
                        @onclick="GoToContentBrowser">
                    Browse Content
                </button>
            </div>
        }
        else
        {
            <ContentEditor OnSaveComplete="HandleSaveComplete" 
                          OnDiscard="HandleDiscardChanges" />
        }
    </div>
</AdminPage>

@code {
    [Parameter]
    public string? Path { get; set; }
    
    private bool IsLoading { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Path))
        {
            await LoadContentAsync();
        }
        else if (AdminState.SelectedItem != null && AdminState.SelectedItem.IsMarkdownFile)
        {
            // Redirecting to proper route
            NavigationManager.NavigateTo($"/admin/content/edit/{AdminState.SelectedItem.Path}");
        }
    }
    
    private async Task LoadContentAsync()
    {
        if (string.IsNullOrEmpty(Path))
        {
            return;
        }
        
        IsLoading = true;
        
        try
        {
            var blogPost = await GitHubService.GetBlogPostAsync(Path);
            AdminState.SetEditingPost(blogPost);
        }
        catch (Exception ex)
        {
            AdminState.SetErrorMessage($"Failed to load content: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
    }
    
    private void CreateNewPost()
    {
        // Create new blog post with empty content
        var newPost = new BlogPost
        {
            Metadata = new FrontMatter
            {
                Title = "New Post",
                Description = "Enter description here",
                Author = string.Empty,
                Date = DateTime.Now.ToString("yyyy-MM-dd"),
                Categories = new List<string>(),
                Tags = new List<string>()
            },
            Content = "## New Post\n\nStart writing your content here...",
            FilePath = string.IsNullOrEmpty(AdminState.CurrentPath) ? 
                "new-post.md" : 
                $"{AdminState.CurrentPath}/new-post.md"
        };
        
        AdminState.SetEditingPost(newPost, true);
    }
    
    private void GoToContentBrowser()
    {
        NavigationManager.NavigateTo("/admin/content");
    }
    
    private async Task HandleSaveComplete(BlogPost post)
    {
        // Navigate to content listing
        NavigationManager.NavigateTo("/admin/content");
    }
    
    private void HandleDiscardChanges()
    {
        // Navigate to content listing
        NavigationManager.NavigateTo("/admin/content");
    }
    
    private string GetPageTitle()
    {
        if (AdminState.EditingPost == null)
        {
            return "Edit Content";
        }
        
        return AdminState.IsCreatingNewFile 
            ? "New Post" 
            : $"Edit: {AdminState.EditingPost.Metadata.Title}";
    }
}