@namespace Osirion.Blazor.Cms.Admin.Components
@using Osirion.Blazor.Cms.Admin.Services
@inherits Osirion.Blazor.Components.OsirionComponentBase
@inject IAuthenticationService AuthService
@inject NavigationManager NavigationManager

@if (AuthService.IsAuthenticated)
{
    @ChildContent
}
else
{
    @if (ShowLoginForm)
    {
        <Login ReturnUrl="@ReturnUrl" OnLoginResult="HandleLoginResult" />
    }
    else
    {
        <div class="osirion-admin-unauthorized">
            <div class="osirion-admin-unauthorized-content">
                <h2 class="osirion-admin-unauthorized-title">Authentication Required</h2>
                <p class="osirion-admin-unauthorized-message">You need to log in to access this area.</p>
                <button type="button"
                        class="osirion-admin-button osirion-admin-button-primary"
                        @onclick="RedirectToLogin">
                    Log In
                </button>
            </div>
        </div>
    }
}

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string LoginPath { get; set; } = "/admin/login";

    [Parameter]
    public bool ShowLoginForm { get; set; } = false;

    [Parameter]
    public EventCallback<bool> OnAuthResult { get; set; }

    private string ReturnUrl => NavigationManager.ToBaseRelativePath(NavigationManager.Uri);

    private void RedirectToLogin()
    {
        var returnUrl = Uri.EscapeDataString(ReturnUrl);
        NavigationManager.NavigateTo($"{LoginPath}?returnUrl={returnUrl}");
    }

    private async Task HandleLoginResult(bool success)
    {
        if (OnAuthResult.HasDelegate)
        {
            await OnAuthResult.InvokeAsync(success);
        }
    }
}