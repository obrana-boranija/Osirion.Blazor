@inject IContentProviderManager ContentProviderManager
@inherits OsirionComponentBase

<div class="@GetCategoriesListClass()">
    @if (Title != null)
    {
        <h3 class="osirion-categories-title">@Title</h3>
    }

    @if (IsLoading)
    {
        <div class="osirion-loading">@LoadingText</div>
    }
    else if (Categories == null || !Categories.Any())
    {
        <div class="osirion-no-categories">@NoContentText</div>
    }
    else
    {
        <ul class="osirion-categories-list">
            @foreach (var category in Categories)
            {
                <li class="osirion-category-item">
                    <a href="@GetCategoryUrl(category)" class="osirion-category-link" rel="nofollow">
                        @category.Name
                        @if (ShowCount)
                        {
                            <span class="osirion-category-count">@category.Count</span>
                        }
                    </a>
                </li>
            }
        </ul>
    }
</div>

@code {
    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string LoadingText { get; set; } = "Loading categories...";

    [Parameter]
    public string NoContentText { get; set; } = "No categories available.";

    [Parameter]
    public Func<ContentCategory, string>? CategoryUrlFormatter { get; set; }

    [Parameter]
    public bool ShowCount { get; set; } = true;

    [Parameter]
    public bool SortByCount { get; set; } = true;

    [Parameter]
    public int? MaxCategories { get; set; }

    [Parameter]
    public string? ActiveCategory { get; set; }

    private IReadOnlyList<ContentCategory>? Categories { get; set; }
    private bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategoriesAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadCategoriesAsync();
    }

    private async Task LoadCategoriesAsync()
    {
        IsLoading = true;
        try
        {
            var provider = ContentProviderManager.GetDefaultProvider();
            if (provider != null)
            {
                var allCategories = await provider.GetCategoriesAsync();

                // Apply sorting
                if (SortByCount)
                {
                    allCategories = allCategories.OrderByDescending(c => c.Count).ToList();
                }
                else
                {
                    allCategories = allCategories.OrderBy(c => c.Name).ToList();
                }

                // Apply limit if specified
                Categories = MaxCategories.HasValue
                    ? allCategories.Take(MaxCategories.Value).ToList()
                    : allCategories;
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading categories: {ex.Message}");
            Categories = Array.Empty<ContentCategory>();
        }
        finally
        {
            IsLoading = false;
        }
    }

    private string GetCategoriesListClass()
    {
        return $"osirion-categories-list-container {CssClass}".Trim();
    }

    private string GetCategoryUrl(ContentCategory category)
    {
        return CategoryUrlFormatter?.Invoke(category) ?? $"/category/{category.Slug}";
    }

    private string GetCategoryLinkClass(ContentCategory category)
    {
        var isActive = !string.IsNullOrEmpty(ActiveCategory) &&
                      (category.Slug.Equals(ActiveCategory, StringComparison.OrdinalIgnoreCase) ||
                       category.Name.Equals(ActiveCategory, StringComparison.OrdinalIgnoreCase));

        return $"osirion-category-link {(isActive ? "osirion-active" : "")}".Trim();
    }
}