@namespace Osirion.Blazor.Theming.Components
@using Microsoft.Extensions.Options
@using Osirion.Blazor.Components
@using Osirion.Blazor.Theming.Services
@inherits OsirionComponentBase
@inject IOptions<ThemingOptions>? Options
@inject IThemeService ThemeService

@LoadScript("./_content/Osirion.Blazor.Theming/js/osirion-styles.js")

<link rel="stylesheet" href="_content/Osirion.Blazor.Core/css/index.css" />

@if (!EffectiveOptions.UseDefaultStyles)
{
    <link rel="stylesheet" href="_content/Osirion.Blazor.Theming/css/index.css" />
}

@if (!string.IsNullOrWhiteSpace(CustomVariables))
{
    <style>
        :root {
        @((MarkupString)CustomVariables)
        }
    </style>
}

@if (!string.IsNullOrWhiteSpace(GeneratedVariables))
{
    <style>
        :root {
        @((MarkupString)GeneratedVariables)
        }
    </style>
}

<script>
    (function(){
        const config = {
            frameworkClass: '@GetFrameworkClass',
            selectedFramework: '@EffectiveOptions.Framework',
            defaultTheme: '@EffectiveOptions.DefaultMode.ToString().ToLowerInvariant()',
            currentTheme: '@ThemeService.CurrentMode.ToString().ToLowerInvariant()'
        };
               
        function init(){
            if(typeof window.initializeOsirionStyles === 'function'){
                window.initializeOsirionStyles(config);
            } else {
                setTimeout(init, 10);
            }
        }
        
        init();
    })();
</script>