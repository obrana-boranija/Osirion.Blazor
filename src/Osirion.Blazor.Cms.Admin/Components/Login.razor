@namespace Osirion.Blazor.Cms.Admin.Components
@using Osirion.Blazor.Cms.Admin.Services
@using Osirion.Blazor.Cms.Domain.Interfaces
@inherits Osirion.Blazor.Components.OsirionComponentBase
@inject IAuthenticationService AuthService
@inject NavigationManager NavigationManager

<div class="@GetLoginClass()">
    <div class="osirion-admin-login-container">
        <div class="osirion-admin-login-header">
            <h1 class="osirion-admin-login-title">@Title</h1>
            @if (!string.IsNullOrEmpty(Description))
            {
                <p class="osirion-admin-login-description">@Description</p>
            }
        </div>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="osirion-admin-alert osirion-admin-alert-error">
                <span class="osirion-admin-alert-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="12" cy="12" r="10" />
                        <line x1="12" y1="8" x2="12" y2="12" />
                        <line x1="12" y1="16" x2="12.01" y2="16" />
                    </svg>
                </span>
                <span>@ErrorMessage</span>
                <button type="button" 
                class="osirion-admin-alert-close" 
                @onclick="@(() => ErrorMessage = string.Empty)"
                aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        }

        @if (IsShowingTokenInput)
        {
            <div class="osirion-admin-login-form">
                <div class="osirion-admin-form-group">
                    <label class="osirion-admin-label" for="accessToken">GitHub Access Token</label>
                    <input type="password" 
                    class="osirion-admin-input" 
                    id="accessToken"
                    @bind="AccessToken"
                    placeholder="Enter your personal access token" />
                    <small class="osirion-admin-form-help">
                        Access token should have repo scope permissions.
                    </small>
                </div>

                <div class="osirion-admin-form-actions">
                    <button type="button"
                    class="osirion-admin-button osirion-admin-button-outline"
                    @onclick="() => IsShowingTokenInput = false">
                        Cancel
                    </button>

                    <button type="button"
                    class="osirion-admin-button osirion-admin-button-primary"
                    @onclick="LoginWithToken"
                    disabled="@(string.IsNullOrEmpty(AccessToken) || IsLoggingIn)">
                        @if (IsLoggingIn)
                        {
                            <span class="osirion-admin-loading-spinner"></span>
                            <span>Authenticating...</span>
                        }
                        else
                        {
                            <span>Login with Token</span>
                        }
                    </button>
                </div>
            </div>
        }
        else
        {
            <div class="osirion-admin-login-options">
                @if (EnableGitHubAuth)
                {
                    <button type="button"
                    class="osirion-admin-button osirion-admin-button-primary osirion-admin-button-github"
                    @onclick="LoginWithGitHub">
                        <span class="osirion-admin-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22" />
                            </svg>
                        </span>
                        Login with GitHub
                    </button>
                }

                <button type="button"
                class="osirion-admin-button osirion-admin-button-secondary"
                @onclick="() => IsShowingTokenInput = true">
                    <span class="osirion-admin-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <rect x="3" y="11" width="18" height="11" rx="2" ry="2" />
                            <path d="M7 11V7a5 5 0 0 1 10 0v4" />
                        </svg>
                    </span>
                    Login with Access Token
                </button>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string Title { get; set; } = "Osirion CMS Admin";

    [Parameter]
    public string Description { get; set; } = "Sign in to manage your content.";

    [Parameter]
    public string Theme { get; set; } = "light";

    [Parameter]
    public bool EnableGitHubAuth { get; set; } = false;

    [Parameter]
    public string ReturnUrl { get; set; } = "/admin";

    [Parameter]
    public EventCallback<bool> OnLoginResult { get; set; }

    private bool IsShowingTokenInput { get; set; }
    private bool IsLoggingIn { get; set; }
    private string AccessToken { get; set; } = string.Empty;
    private string ErrorMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Check if we have a code parameter (from GitHub OAuth redirect)
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParameters = QueryHelpers.ParseQuery(uri.Query);

        string code;
        if (QueryHelpers.TryGetValue(queryParameters, "code", out code))
        {
            // Process GitHub OAuth login
            await ProcessGitHubOAuthAsync(code);
        }
    }

    private async Task ProcessGitHubOAuthAsync(string code)
    {
        try
        {
            IsLoggingIn = true;

            var result = await AuthService.AuthenticateWithGitHubAsync(code);

            if (result)
            {
                // Redirect to return URL
                NavigationManager.NavigateTo(ReturnUrl);

                if (OnLoginResult.HasDelegate)
                {
                    await OnLoginResult.InvokeAsync(true);
                }
            }
            else
            {
                ErrorMessage = "Failed to authenticate with GitHub. Please try again.";

                if (OnLoginResult.HasDelegate)
                {
                    await OnLoginResult.InvokeAsync(false);
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Authentication error: {ex.Message}";

            if (OnLoginResult.HasDelegate)
            {
                await OnLoginResult.InvokeAsync(false);
            }
        }
        finally
        {
            IsLoggingIn = false;
        }
    }

    private void LoginWithGitHub()
    {
        // Redirect to GitHub OAuth authorize URL
        // Note: In a real application, this would redirect to GitHub's OAuth flow
        // For this example, we'll just show a message that this requires configuration
        ErrorMessage = "GitHub OAuth login requires additional configuration.";
    }

    private async Task LoginWithToken()
    {
        if (string.IsNullOrEmpty(AccessToken))
        {
            ErrorMessage = "Please enter an access token.";
            return;
        }

        try
        {
            IsLoggingIn = true;

            var result = await AuthService.SetAccessTokenAsync(AccessToken);

            if (result)
            {
                // Redirect to return URL
                NavigationManager.NavigateTo(ReturnUrl);

                if (OnLoginResult.HasDelegate)
                {
                    await OnLoginResult.InvokeAsync(true);
                }
            }
            else
            {
                ErrorMessage = "Invalid access token. Please check and try again.";

                if (OnLoginResult.HasDelegate)
                {
                    await OnLoginResult.InvokeAsync(false);
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Authentication error: {ex.Message}";

            if (OnLoginResult.HasDelegate)
            {
                await OnLoginResult.InvokeAsync(false);
            }
        }
        finally
        {
            IsLoggingIn = false;
        }
    }

    private string GetLoginClass()
    {
        return $"osirion-admin-login osirion-admin-theme-{Theme} {CssClass}".Trim();
    }
}