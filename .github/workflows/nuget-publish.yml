name: NuGet Package Publish

on:
  push:
    tags:
      - 'v*' # Trigger on version tags
  workflow_dispatch: # Allow manual trigger
    inputs:
      version_override:
        description: 'Override version (leave empty to use tag or project version)'
        required: false
        type: string
      pre_release:
        description: 'Publish as pre-release'
        required: false
        type: boolean
        default: false

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace }}/nuget

jobs:
  create_nuget:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Get all history for versioning
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x
      
      - name: Determine Version
        id: get_version
        run: |
          if [ -n "${{ github.event.inputs.version_override }}" ]; then
            VERSION="${{ github.event.inputs.version_override }}"
            echo "Using override version: $VERSION"
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"
            echo "Using tag version: $VERSION"
          else
            # Extract version from main project file
            VERSION=$(grep -oP '(?<=<Version>).*?(?=</Version>)' src/Osirion.Blazor/Osirion.Blazor.csproj)
            echo "Using project version: $VERSION"
          fi
          
          # Validate semantic versioning format
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$ ]]; then
            echo "Error: Version must follow semantic versioning format (e.g., 2.0.3 or 2.0.3-beta.1)"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "::notice title=Package Version::Will publish version $VERSION"
      
      - name: Create NuGet Directory
        run: mkdir -p ${{ env.NuGetDirectory }}
      
      # Fix platform compatibility issues by adding conditional compilation
      - name: Setup compatibility settings
        run: |
          # Create Directory.Build.props to suppress warnings
          cat > Directory.Build.props << 'EOF'
          <Project>
            <PropertyGroup>
              <NoWarn>$(NoWarn);CA1416;CS8632;CS1998;CS8600;CS8603;CS8618;CS8604;CS8602;CS8625;CS0234</NoWarn>
              <TreatWarningsAsErrors>false</TreatWarningsAsErrors>
            </PropertyGroup>
          </Project>
          EOF
      
      # Full restore first
      - name: Restore dependencies
        run: dotnet restore
      
      # Optimized build and pack process - build projects and their dependencies together
      - name: Build and Pack Core Module
        run: |
          echo "Building and packing Core..."
          dotnet pack src/Osirion.Blazor.Core/Osirion.Blazor.Core.csproj -c Release -o ${{ env.NuGetDirectory }}
      
      # Build and pack modules in parallel
      - name: Build and Pack Feature Modules
        run: |
          echo "Building and packing feature modules..."
          # Run a combined pack operation for all modules that depend on Core
          dotnet pack src/Osirion.Blazor.Analytics/Osirion.Blazor.Analytics.csproj -c Release -o ${{ env.NuGetDirectory }} &
          dotnet pack src/Osirion.Blazor.Navigation/Osirion.Blazor.Navigation.csproj -c Release -o ${{ env.NuGetDirectory }} &
          dotnet pack src/Osirion.Blazor.Theming/Osirion.Blazor.Theming.csproj -c Release -o ${{ env.NuGetDirectory }} &
          
          # Wait for all background processes to complete
          wait
          
          # CMS modules need to be built in the correct order due to dependencies
          echo "Building and packing CMS Domain..."
          dotnet pack src/Osirion.Blazor.Cms.Domain/Osirion.Blazor.Cms.Domain.csproj -c Release -o ${{ env.NuGetDirectory }}
          
          echo "Building and packing CMS Application..."
          dotnet pack src/Osirion.Blazor.Cms.Application/Osirion.Blazor.Cms.Application.csproj -c Release -o ${{ env.NuGetDirectory }}
          
          echo "Building and packing CMS Infrastructure..."
          dotnet pack src/Osirion.Blazor.Cms.Infrastructure/Osirion.Blazor.Cms.Infrastructure.csproj -c Release -o ${{ env.NuGetDirectory }}
          
          echo "Building and packing CMS modules..."
          dotnet pack src/Osirion.Blazor.Cms.Core/Osirion.Blazor.Cms.Core.csproj -c Release -o ${{ env.NuGetDirectory }}
          dotnet pack src/Osirion.Blazor.Cms.Admin/Osirion.Blazor.Cms.Admin.csproj -c Release -o ${{ env.NuGetDirectory }}
          dotnet pack src/Osirion.Blazor.Cms.Web/Osirion.Blazor.Cms.Web.csproj -c Release -o ${{ env.NuGetDirectory }}
          dotnet pack src/Osirion.Blazor.Cms/Osirion.Blazor.Cms.csproj -c Release -o ${{ env.NuGetDirectory }}
      
      # Build and pack main package last
      - name: Build and Pack Main Package
        run: |
          echo "Building and packing main package..."
          dotnet pack src/Osirion.Blazor/Osirion.Blazor.csproj -c Release -o ${{ env.NuGetDirectory }}
      
      # List packages to verify they exist
      - name: List packages
        run: |
          echo "Generated NuGet packages:"
          ls -la ${{ env.NuGetDirectory }}
          
          # Check package count
          package_count=$(ls -1 ${{ env.NuGetDirectory }}/*.nupkg 2>/dev/null | wc -l)
          if [ "$package_count" -eq 0 ]; then
            echo "Error: No packages were created!"
            exit 1
          else
            echo "Successfully created $package_count packages"
          fi
      
      # Upload artifacts
      - name: Upload NuGet packages as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: ${{ env.NuGetDirectory }}/*.nupkg
          if-no-files-found: error
  
  validate_version:
    needs: create_nuget
    runs-on: ubuntu-latest
    steps:
      - name: Download NuGet packages
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ${{ env.NuGetDirectory }}
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      # Check if version exists
      - name: Check for existing packages
        id: check_versions
        run: |
          # Initialize flags
          echo "has_duplicates=false" >> $GITHUB_OUTPUT
          conflict_packages=""
          
          # Check each package
          for package in ${{ env.NuGetDirectory }}/*.nupkg; do
            basename=$(basename "$package")
            packageId=$(echo "$basename" | sed -E 's/(.*)\.[0-9]+\.[0-9]+\.[0-9]+.*\.nupkg/\1/')
            version=$(echo "$basename" | sed -E 's/.*\.([0-9]+\.[0-9]+\.[0-9]+.*)\.nupkg/\1/')
            
            echo "Checking package: $packageId, version: $version"
            
            # Use dotnet nuget to check if package exists
            status=$(dotnet nuget list source --format Short | grep -q "nuget.org" && \
                    curl -s -o /dev/null -w "%{http_code}" "https://api.nuget.org/v3-flatcontainer/$packageId/$version/$packageId.$version.nupkg")
            
            if [ "$status" == "200" ]; then
              echo "::warning::Package $packageId version $version already exists on NuGet"
              conflict_packages="$conflict_packages $packageId@$version"
              echo "has_duplicates=true" >> $GITHUB_OUTPUT
            else
              echo "Package $packageId version $version is new and can be published"
            fi
          done
          
          # Store conflicts for later use
          if [ -n "$conflict_packages" ]; then
            echo "conflict_packages=$conflict_packages" >> $GITHUB_OUTPUT
          fi
  
  publish_nuget:
    needs: [create_nuget, validate_version]
    runs-on: ubuntu-latest
    steps:
      - name: Download NuGet packages
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ${{ env.NuGetDirectory }}
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      # Publish to NuGet
      - name: Publish NuGet packages
        id: publish
        run: |
          # Initialize counters
          published=0
          skipped=0
          failed=0
          
          for package in ${{ env.NuGetDirectory }}/*.nupkg; do
            basename=$(basename "$package")
            packageId=$(echo "$basename" | sed -E 's/(.*)\.[0-9]+\.[0-9]+\.[0-9]+.*\.nupkg/\1/')
            version=$(echo "$basename" | sed -E 's/.*\.([0-9]+\.[0-9]+\.[0-9]+.*)\.nupkg/\1/')
            
            echo "Publishing package: $packageId, version: $version"
            
            output=$(dotnet nuget push "$package" \
              --api-key ${{ secrets.NUGET_API_KEY }} \
              --source https://api.nuget.org/v3/index.json \
              --skip-duplicate 2>&1)
            
            exit_code=$?
            
            if echo "$output" | grep -q "already exists"; then
              echo "Package $packageId version $version already exists, skipped"
              skipped=$((skipped + 1))
            elif [ $exit_code -eq 0 ]; then
              echo "Successfully published $packageId version $version"
              published=$((published + 1))
            else
              echo "Failed to publish $packageId version $version: $output"
              failed=$((failed + 1))
            fi
          done
          
          # Report results
          echo "::notice::Published: $published, Skipped: $skipped, Failed: $failed"
          
          if [ $failed -gt 0 ]; then
            echo "::error::$failed packages failed to publish"
            exit 1
          fi
          
          echo "nuget_packages_published=$published" >> $GITHUB_OUTPUT
          echo "nuget_packages_skipped=$skipped" >> $GITHUB_OUTPUT
  
  create_release:
    needs: [create_nuget, publish_nuget]
    if: |
      (startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch') && 
      needs.publish_nuget.outputs.nuget_packages_published > 0
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get version for release
        id: get_release_version
        run: |
          VERSION="${{ needs.create_nuget.outputs.version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Determine if this is a pre-release
          if [[ "$VERSION" == *-* ]] || [ "${{ github.event.inputs.pre_release }}" = "true" ]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Extract Changelog
        id: extract_changelog
        run: |
          # Extract release notes from CHANGELOG.md
          VERSION="${{ steps.get_release_version.outputs.version }}"
          
          # Look for version with or without pre-release marker
          CHANGELOG_SECTION=$(awk "/## \[$VERSION\]|## \[$VERSION \(Pre-release\)\]/{flag=1; print; next} /## \[/{flag=0} flag" CHANGELOG.md)
          
          if [ -z "$CHANGELOG_SECTION" ]; then
            echo "::warning::No changelog entry found for version $VERSION"
            CHANGELOG_SECTION="Release version $VERSION"
          fi
          
          # Save to file for the GitHub release
          echo "$CHANGELOG_SECTION" > release_notes.txt
      
      - name: Download Packages for Release
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: nuget-packages
      
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          VERSION: ${{ steps.get_release_version.outputs.version }}
          IS_PRERELEASE: ${{ steps.get_release_version.outputs.is_prerelease }}
        run: |
          # Create a tag if running manually without a tag
          if [[ "${{ github.ref }}" != refs/tags/* ]]; then
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git tag "v$VERSION"
            git push origin "v$VERSION"
            echo "Created and pushed tag v$VERSION"
          fi
          
          TAG="v$VERSION"
          TITLE="Release $TAG"
          
          if [ "$IS_PRERELEASE" = "true" ]; then
            PRERELEASE_FLAG="--prerelease"
            TITLE="$TITLE (Pre-release)"
          else
            PRERELEASE_FLAG=""
          fi
          
          # Create the release
          gh release create "$TAG" \
            --title "$TITLE" \
            --notes-file release_notes.txt \
            $PRERELEASE_FLAG \
            nuget-packages/*.nupkg
          
          echo "::notice::Created GitHub release $TAG"