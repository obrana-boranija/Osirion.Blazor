@page "/{locale}/blog/{*path}"
@page "/blog/{*path}"
@using Osirion.Blazor.Cms.Components
@using Osirion.Blazor.Cms.Domain.Entities
@using Osirion.Blazor.Cms.Domain.Services
@inject IContentProviderManager ContentProviderManager
@inject NavigationManager NavigationManager
@attribute [StreamRendering]

@if (Content != null)
{
    <SeoMetadataRenderer Content="@Content" SiteName="My Website" BaseUrl="https://example.com" />
}

<div class="page-container">
    <div class="sidebar">
        <LocalizedNavigation CurrentLocale="@Locale"
                             OnLocaleChanged="HandleLocaleChanged"
                             OnDirectorySelected="HandleDirectorySelected"
                             OnContentSelected="HandleContentSelected"
                             DirectoryUrlFormatter="@FormatDirectoryUrl"
                             ContentUrlFormatter="@FormatContentUrl"
                             LocaleNameFormatter="@FormatLocaleName"
                             Title="Navigation" />
    </div>

    <div class="main-content">
        <ContentBreadcrumbs Content="@Content"
                            Directory="@CurrentDirectory"
                            DirectoryUrlFormatter="@FormatDirectoryUrl"
                            HomeUrl="@($"/{Locale}")" />

        @if (Content != null)
        {
            <LocalizedContentView Item="@Content"
                                  CurrentLocale="@Locale"
                                  OnLocaleChanged="HandleLocaleChanged"
                                  TranslationUrlFormatter="@FormatTranslationUrl"
                                  CategoryUrlFormatter="@FormatCategoryUrl"
                                  TagUrlFormatter="@FormatTagUrl"
                                  ContentUrlFormatter="@FormatContentUrl"
                                  LocaleNameFormatter="@FormatLocaleName"
                                  ShowNavigationLinks="true" />
        }
        else if (CurrentDirectory != null)
        {
            <div class="directory-content">
                <h1>@CurrentDirectory.Name</h1>

                @if (!string.IsNullOrEmpty(CurrentDirectory.Description))
                {
                    <p class="directory-description">@CurrentDirectory.Description</p>
                }

                <ContentList Locale="@Locale"
                             DirectoryId="@CurrentDirectory.Id"
                             ContentUrlFormatter="@FormatContentUrl"
                             ShowPagination="true"
                             ItemsPerPage="10" />
            </div>
        }
        else
        {
            <div class="home-content">
                <h1>Welcome to our website</h1>

                <h2>Featured Content</h2>
                <ContentList Locale="@Locale"
                             FeaturedCount="3"
                             ContentUrlFormatter="@FormatContentUrl" />

                <h2>Latest Articles</h2>
                <ContentList Locale="@Locale"
                             ItemsPerPage="5"
                             ContentUrlFormatter="@FormatContentUrl" />
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string Locale { get; set; } = "en";

    [Parameter]
    public string? Path { get; set; }

    private ContentItem? Content { get; set; }
    private DirectoryItem? CurrentDirectory { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadContentAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadContentAsync();
    }

    private async Task LoadContentAsync()
    {
        if (string.IsNullOrEmpty(Path))
        {
            // Home page - no specific content
            Content = null;
            CurrentDirectory = null;
            return;
        }

        var provider = ContentProviderManager.GetDefaultProvider();
        if (provider == null)
            return;

        // Try to load content first
        string fullPath = $"{Locale}/{Path}";
        Content = await provider.GetItemByUrlAsync(NavigationManager.ToBaseRelativePath(NavigationManager.Uri));

        if (Content != null)
        {
            CurrentDirectory = Content.Directory;
            return;
        }

        // If not a content item, try as a directory
        CurrentDirectory = await provider.GetDirectoryByPathAsync(Path);

        if (CurrentDirectory == null)
        {
            // Handle 404 case
            // You could redirect to a 404 page or show a not found message
        }
    }

    private void HandleLocaleChanged(string locale)
    {
        NavigationManager.NavigateTo(Path ?? "/");
    }

    private void HandleDirectorySelected(DirectoryItem directory)
    {
        NavigationManager.NavigateTo($"/{directory.Path}");
    }

    private void HandleContentSelected(ContentItem item)
    {
        NavigationManager.NavigateTo($"/{item.Url}");
    }

    private string FormatDirectoryUrl(DirectoryItem directory)
    {
        return $"/{Locale}/{directory.Path}";
    }

    private string FormatContentUrl(ContentItem item)
    {
        return $"/{item.Url}";
    }

    private string FormatCategoryUrl(string category)
    {
        return $"/{Locale}/category/{category.ToLower().Replace(' ', '-')}";
    }

    private string FormatTagUrl(string tag)
    {
        return $"/{Locale}/tag/{tag.ToLower().Replace(' ', '-')}";
    }

    private string FormatTranslationUrl(string localizationId, string locale)
    {
        if (Content is not null)
        {
            var item = ContentProviderManager.GetLocalizedContentAsync(localizationId, locale).Result;
            return item?.Url ?? "/";
        }

        return $"/{locale}";
    }

    private string FormatLocaleName(string locale)
    {
        // This would be expanded with a proper locale name lookup
        return locale.ToUpperInvariant() switch
        {
            "EN" => "English",
            "ES" => "Español",
            "DE" => "Deutsch",
            "FR" => "Français",
            _ => locale.ToUpperInvariant()
        };
    }
}