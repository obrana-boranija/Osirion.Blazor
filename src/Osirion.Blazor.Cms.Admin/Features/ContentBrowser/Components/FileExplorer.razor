@namespace Osirion.Blazor.Cms.Admin.Features.ContentBrowser.Components
@inherits BaseComponent
@using Osirion.Blazor.Cms.Admin.Features.ContentBrowser.ViewModels
@using Osirion.Blazor.Cms.Admin.Shared.Components
@using Osirion.Blazor.Cms.Domain.Models.GitHub
@inject FileExplorerViewModel ViewModel

<div class="file-explorer card h-100 border shadow-sm">
    <div class="card-header bg-light d-flex justify-content-between align-items-center py-2">
        <div class="d-flex align-items-center">
            <button type="button"
                    class="btn btn-sm btn-outline-secondary me-2"
                    title="Go to root"
                    @onclick="ViewModel.NavigateToRootAsync">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-house" viewBox="0 0 16 16">
                  <path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L2 8.207V13.5A1.5 1.5 0 0 0 3.5 15h9a1.5 1.5 0 0 0 1.5-1.5V8.207l.646.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293zM13 7.207V13.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V7.207l5-5z"/>
                </svg>
            </button>

            <span class="file-path text-secondary small font-monospace">
                @(string.IsNullOrEmpty(ViewModel.CurrentPath) ? "/" : ViewModel.CurrentPath)
            </span>

            <button type="button"
                    class="btn btn-sm btn-icon ms-2"
                    title="Refresh"
                    @onclick="ViewModel.LoadContentsAsync">
                <i class="bi bi-arrow-repeat"></i>
            </button>
        </div>

        <div>
            <button type="button"
                    class="btn btn-sm btn-primary"
                    @onclick="CreateNewFile"
                    disabled="!ViewModel.IsValidRepositoryAndBranch">
                <i class="bi bi-plus-lg me-1"></i>
                <span class="d-none d-sm-inline">New File</span>
            </button>
        </div>
    </div>

    <div class="card-body p-0 overflow-auto">
        @if (ViewModel.IsLoading)
        {
            <div class="d-flex justify-content-center align-items-center py-5">
                <div class="spinner-border text-secondary spinner-border-sm me-2" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <span class="text-secondary">Loading...</span>
            </div>
        }
        else if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
        {
            <div class="p-4">
                <div class="alert alert-danger d-flex align-items-center" role="alert">
                    <i class="bi bi-exclamation-circle-fill me-2"></i>
                    <div>@ViewModel.ErrorMessage</div>
                </div>
                <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="ViewModel.LoadContentsAsync">
                    Retry
                </button>
            </div>
        }
        else if (!ViewModel.IsValidRepositoryAndBranch)
        {
            <div class="d-flex flex-column align-items-center justify-content-center py-5 text-secondary">
                <i class="bi bi-database-fill-gear mb-3" style="font-size: 2rem;"></i>
                <p>Please select a repository and branch.</p>
            </div>
        }
        else if (ViewModel.Contents.Count == 0)
        {
            <div class="d-flex flex-column align-items-center justify-content-center py-5 text-secondary">
                <i class="bi bi-folder2-open mb-3" style="font-size: 2rem;"></i>
                <p>No files found in this directory.</p>
            </div>
        }
        else
        {
            <div class="list-group list-group-flush">
                @if (!string.IsNullOrEmpty(ViewModel.CurrentPath))
                {
                    <button class="list-group-item list-group-item-action d-flex align-items-center"
                            @onclick="@(() => ViewModel.NavigateToParentDirectoryAsync())">
                        <div class="me-2 text-secondary">
                            <i class="bi bi-reply-fill"></i>
                        </div>
                        <span class="text-secondary">..</span>
                    </button>
                }

                @foreach (var item in ViewModel.Contents.Where(i => i.IsDirectory).OrderBy(i => i.Name))
                {
                    <button class="list-group-item list-group-item-action d-flex align-items-center @(ViewModel.IsItemSelected(item) ? "active" : "")"
                            @onclick="@(() => ViewModel.HandleItemClickAsync(item))">
                        <div class="me-2 @(ViewModel.IsItemSelected(item) ? "text-white" : "text-primary")">
                            <i class="bi bi-folder-fill"></i>
                        </div>
                        <span>@item.Name</span>
                    </button>
                }

                @foreach (var item in ViewModel.Contents.Where(i => i.IsFile).OrderBy(i => i.Name))
                {
                    <div class="list-group-item list-group-item-action d-flex align-items-center justify-content-between @(ViewModel.IsItemSelected(item) ? "active" : "")"
                         @onclick="@(() => ViewModel.HandleItemClickAsync(item))">
                        <div class="d-flex align-items-center overflow-hidden">
                            <div class="me-2 @(ViewModel.IsItemSelected(item) ? "text-white" : "text-secondary")">
                                @if (item.Name.EndsWith(".md", StringComparison.OrdinalIgnoreCase))
                                {
                                    <i class="bi bi-markdown-fill"></i>
                                }
                                else
                                {
                                    <i class="bi bi-file-earmark"></i>
                                }
                            </div>
                            <span class="text-truncate">@item.Name</span>
                        </div>
                        <div class="file-actions">
                            <button type="button"
                                    class="btn btn-sm btn-icon @(ViewModel.IsItemSelected(item) ? "text-white" : "text-danger")"
                                    title="Delete"
                                    @onclick:stopPropagation="true"
                                    @onclick="@(() => ViewModel.ShowDeleteConfirmation(item))">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    @if (ViewModel.IsShowingDeleteConfirmation)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1" aria-modal="true" role="dialog">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Delete File</h5>
                        <button type="button" class="btn-close" @onclick="ViewModel.CancelDelete" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete "@ViewModel.FileToDelete?.Name"?</p>
                        <p class="text-danger fw-bold small">This action cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button"
                                class="btn btn-outline-secondary"
                                @onclick="ViewModel.CancelDelete">
                            Cancel
                        </button>
                        <button type="button"
                                class="btn btn-danger"
                                @onclick="ViewModel.DeleteFileAsync"
                                disabled="@ViewModel.IsDeletingFile">
                            @if (ViewModel.IsDeletingFile)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Deleting...</span>
                            }
                            else
                            {
                                <span>Delete</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop fade show"></div>
        </div>
    }
</div>