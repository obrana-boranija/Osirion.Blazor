name: Test Coverage

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch: # Allow manual triggering

jobs:
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x
    
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Test with coverage
      id: test
      continue-on-error: true  # Continue even if tests fail
      run: |
        dotnet test --no-build --configuration Release --verbosity detailed \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage \
          --logger "trx;LogFileName=test-results.trx"
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ./coverage/**/*.trx
        retention-days: 7
    
    - name: Check for coverage files
      id: check_coverage
      if: always()
      run: |
        if ls ./coverage/**/coverage.cobertura.xml 1> /dev/null 2>&1; then
          echo "COVERAGE_EXISTS=true" >> $GITHUB_ENV
          echo "::notice::Coverage files found, proceeding with report generation"
        else
          echo "COVERAGE_EXISTS=false" >> $GITHUB_ENV
          echo "::warning::No coverage files found. Test run may have failed completely."
        fi
    
    - name: Generate HTML report
      if: env.COVERAGE_EXISTS == 'true'
      uses: danielpalme/ReportGenerator-GitHub-Action@5.4.7
      with:
        reports: './coverage/**/coverage.cobertura.xml'
        targetdir: 'coveragereport'
        reporttypes: 'HtmlInline;Cobertura;MarkdownSummary'
        title: 'Osirion.Blazor Coverage Report'
    
    - name: Upload coverage report artifact
      if: env.COVERAGE_EXISTS == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coveragereport
        retention-days: 30
    
    - name: Create coverage summary
      id: coverage_summary
      if: env.COVERAGE_EXISTS == 'true'
      run: |
        if [ -f "coveragereport/Summary.md" ]; then
          # Print summary to console
          cat coveragereport/Summary.md
          
          # Extract coverage percentage
          COVERAGE_PCT=$(grep -oP '\d+\.\d+(?=%)' coveragereport/Summary.md | head -1)
          if [ -n "$COVERAGE_PCT" ]; then
            echo "coverage=$COVERAGE_PCT" >> $GITHUB_OUTPUT
            
            if (( $(echo "$COVERAGE_PCT < 70" | bc -l) )); then
              echo "::warning::Coverage is below 70% (Current: ${COVERAGE_PCT}%)"
            else
              echo "::notice::Coverage is ${COVERAGE_PCT}%"
            fi
          else
            echo "::warning::Could not extract coverage percentage"
          fi
        else
          echo "::warning::Summary.md not found"
        fi
    
    - name: Upload to Codecov
      if: env.COVERAGE_EXISTS == 'true'
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage/**/coverage.cobertura.xml
        fail_ci_if_error: false
        verbose: true
    
    - name: Add Coverage PR Comment
      if: github.event_name == 'pull_request' && env.COVERAGE_EXISTS == 'true' && steps.coverage_summary.outputs.coverage != ''
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: test-coverage
        message: |
          # Test Coverage Report
          
          Overall coverage: **${{ steps.coverage_summary.outputs.coverage }}%**
          
          <details>
          <summary>Coverage details</summary>
          
          ```
          $(cat coveragereport/Summary.md || echo "Summary not available")
          ```
          
          [Full HTML report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          </details>
    
    - name: Check test status
      if: steps.test.outcome == 'failure'
      run: |
        echo "::error::Tests failed. Please fix failing tests for accurate coverage reporting."
        echo "Failed tests summary:"
        grep -r "Failed" ./coverage/*.trx || echo "Could not extract failures from test results."