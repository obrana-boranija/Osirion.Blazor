@inherits OsirionComponentBase

<nav class="@GetDirectoryNavClass()">
    @if (Title != null)
    {
        <h3 class="osirion-directory-title">@Title</h3>
    }

    @if (IsLoading)
    {
        <div class="osirion-loading">@LoadingText</div>
    }
    else if (Directories == null || !Directories.Any())
    {
        <div class="osirion-no-directories">@NoContentText</div>
    }
    else
    {
        <ul class="osirion-directory-list">
            @foreach (var directory in Directories)
            {
                <li class="osirion-directory-item">
                    <a href="@GetDirectoryUrl(directory)"
                       class="@GetLinkClass(directory)"
                       @onclick="() => OnDirectoryClick(directory)"
                       @onclick:preventDefault="DirectoryClicked.HasDelegate">
                        @directory.Name
                        @if (ShowItemCount)
                        {
                            <span class="osirion-directory-count">@directory.ItemCount</span>
                        }
                    </a>

                    @if (ShowSubdirectories && directory.Subdirectories != null && directory.Subdirectories.Any()
                   && (ExpandedDirectory == directory.Path || ExpandAllSubdirectories))
                    {
                        <ul class="osirion-subdirectory-list">
                            @foreach (var subdirectory in directory.Subdirectories)
                            {
                                <li class="osirion-directory-item">
                                    <a href="@GetDirectoryUrl(subdirectory)"
                                       class="@GetLinkClass(subdirectory)"
                                       @onclick="() => OnDirectoryClick(subdirectory)"
                                       @onclick:preventDefault="DirectoryClicked.HasDelegate">
                                        @subdirectory.Name
                                        @if (ShowItemCount)
                                        {
                                            <span class="osirion-directory-count">@subdirectory.ItemCount</span>
                                        }
                                    </a>
                                </li>
                            }
                        </ul>
                    }
                </li>
            }
        </ul>
    }
</nav>

@code {
    [Parameter]
    public IReadOnlyList<DirectoryInfo>? Directories { get; set; }

    [Parameter]
    public string? CurrentDirectory { get; set; }

    [Parameter]
    public string? ExpandedDirectory { get; set; }

    [Parameter]
    public bool ExpandAllSubdirectories { get; set; } = false;

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public bool ShowItemCount { get; set; } = true;

    [Parameter]
    public bool ShowSubdirectories { get; set; } = true;

    [Parameter]
    public string LoadingText { get; set; } = "Loading navigation...";

    [Parameter]
    public string NoContentText { get; set; } = "No directories available.";

    [Parameter]
    public Func<DirectoryInfo, string>? DirectoryUrlFormatter { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public EventCallback<DirectoryInfo> DirectoryClicked { get; set; }

    private string GetDirectoryNavClass()
    {
        return $"osirion-directory-navigation {CssClass}".Trim();
    }

    private string GetDirectoryUrl(DirectoryInfo directory)
    {
        return DirectoryUrlFormatter?.Invoke(directory) ?? $"/{directory.Path}";
    }

    private string GetLinkClass(DirectoryInfo directory)
    {
        var isActive = directory.Path == CurrentDirectory;
        return $"osirion-directory-link {(isActive ? "osirion-active" : "")}".Trim();
    }

    private async Task OnDirectoryClick(DirectoryInfo directory)
    {
        if (DirectoryClicked.HasDelegate)
        {
            await DirectoryClicked.InvokeAsync(directory);
        }
    }

    public class DirectoryInfo
    {
        public string Path { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public int ItemCount { get; set; }
        public IReadOnlyList<DirectoryInfo>? Subdirectories { get; set; }
    }
}