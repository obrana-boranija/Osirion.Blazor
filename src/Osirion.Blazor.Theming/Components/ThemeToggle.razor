@namespace Osirion.Blazor.Theming.Components
@using Osirion.Blazor.Theming.Services
@inherits Osirion.Blazor.Components.OsirionComponentBase
@inject IThemeService ThemeService

<div class="theme-toggle @CssClass">
    @if (ShowLabels)
    {
        <button @onclick="@(() => SetMode(ThemeMode.Light))"
                class="@GetButtonClass(ThemeMode.Light)"
                aria-pressed="@(CurrentMode == ThemeMode.Light)">
            @if (LightIconTemplate != null)
            {
                @LightIconTemplate
            }
            else
            {
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="12" cy="12" r="5" />
                    <line x1="12" y1="1" x2="12" y2="3" />
                    <line x1="12" y1="21" x2="12" y2="23" />
                    <line x1="4.22" y1="4.22" x2="5.64" y2="5.64" />
                    <line x1="18.36" y1="18.36" x2="19.78" y2="19.78" />
                    <line x1="1" y1="12" x2="3" y2="12" />
                    <line x1="21" y1="12" x2="23" y2="12" />
                    <line x1="4.22" y1="19.78" x2="5.64" y2="18.36" />
                    <line x1="18.36" y1="5.64" x2="19.78" y2="4.22" />
                </svg>
            }
            <span>@LightLabel</span>
        </button>

        <button @onclick="@(() => SetMode(ThemeMode.Dark))"
                class="@GetButtonClass(ThemeMode.Dark)"
                aria-pressed="@(CurrentMode == ThemeMode.Dark)">
            @if (DarkIconTemplate != null)
            {
                @DarkIconTemplate
            }
            else
            {
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z" />
                </svg>
            }
            <span>@DarkLabel</span>
        </button>

        @if (ShowSystemOption)
        {
            <button @onclick="@(() => SetMode(ThemeMode.System))"
                    class="@GetButtonClass(ThemeMode.System)"
                    aria-pressed="@(CurrentMode == ThemeMode.System)">
                @if (SystemIconTemplate != null)
                {
                    @SystemIconTemplate
                }
                else
                {
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <rect x="2" y="3" width="20" height="14" rx="2" ry="2" />
                        <line x1="8" y1="21" x2="16" y2="21" />
                        <line x1="12" y1="17" x2="12" y2="21" />
                    </svg>
                }
                <span>@SystemLabel</span>
            </button>
        }
    }
    else
    {
        <button @onclick="CycleTheme" class="theme-toggle-button" aria-label="Toggle theme">
            @if (CurrentMode == ThemeMode.Light)
            {
                @if (LightIconTemplate != null)
                {
                    @LightIconTemplate
                }
                else
                {
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="12" cy="12" r="5" />
                        <line x1="12" y1="1" x2="12" y2="3" />
                        <line x1="12" y1="21" x2="12" y2="23" />
                        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64" />
                        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78" />
                        <line x1="1" y1="12" x2="3" y2="12" />
                        <line x1="21" y1="12" x2="23" y2="12" />
                        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36" />
                        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22" />
                    </svg>
                }
            }
            else if (CurrentMode == ThemeMode.Dark)
            {
                @if (DarkIconTemplate != null)
                {
                    @DarkIconTemplate
                }
                else
                {
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z" />
                    </svg>
                }
            }
            else
            {
                @if (SystemIconTemplate != null)
                {
                    @SystemIconTemplate
                }
                else
                {
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <rect x="2" y="3" width="20" height="14" rx="2" ry="2" />
                        <line x1="8" y1="21" x2="16" y2="21" />
                        <line x1="12" y1="17" x2="12" y2="21" />
                    </svg>
                }
            }
        </button>
    }
</div>

@code {
    /// <summary>
    /// Gets or sets whether to show labels
    /// </summary>
    [Parameter]
    public bool ShowLabels { get; set; } = true;

    /// <summary>
    /// Gets or sets whether to show system option
    /// </summary>
    [Parameter]
    public bool ShowSystemOption { get; set; } = true;

    /// <summary>
    /// Gets or sets the light mode label
    /// </summary>
    [Parameter]
    public string LightLabel { get; set; } = "Light";

    /// <summary>
    /// Gets or sets the dark mode label
    /// </summary>
    [Parameter]
    public string DarkLabel { get; set; } = "Dark";

    /// <summary>
    /// Gets or sets the system mode label
    /// </summary>
    [Parameter]
    public string SystemLabel { get; set; } = "System";

    /// <summary>
    /// Gets or sets the light mode icon template
    /// </summary>
    [Parameter]
    public RenderFragment? LightIconTemplate { get; set; }

    /// <summary>
    /// Gets or sets the dark mode icon template
    /// </summary>
    [Parameter]
    public RenderFragment? DarkIconTemplate { get; set; }

    /// <summary>
    /// Gets or sets the system mode icon template
    /// </summary>
    [Parameter]
    public RenderFragment? SystemIconTemplate { get; set; }

    /// <summary>
    /// Gets or sets the event callback for mode changes
    /// </summary>
    [Parameter]
    public EventCallback<ThemeMode> OnModeChanged { get; set; }

    private ThemeMode CurrentMode => ThemeService.CurrentMode;

    private async Task SetMode(ThemeMode mode)
    {
        ThemeService.SetThemeMode(mode);
        await OnModeChanged.InvokeAsync(mode);
    }

    private async Task CycleTheme()
    {
        var nextMode = CurrentMode switch
        {
            ThemeMode.Light => ThemeMode.Dark,
            ThemeMode.Dark => ShowSystemOption ? ThemeMode.System : ThemeMode.Light,
            ThemeMode.System => ThemeMode.Light,
            _ => ThemeMode.Light
        };

        await SetMode(nextMode);
    }

    private string GetButtonClass(ThemeMode mode)
    {
        return CurrentMode == mode ? "active" : "";
    }
}