@page "/admin/settings"
@rendermode InteractiveServer

@using Osirion.Blazor.Cms.Admin
@using Osirion.Blazor.Cms.Admin.Components
@using Osirion.Blazor.Cms.Admin.Services
@using Microsoft.Extensions.Options
@using Osirion.Blazor.Cms.Admin.Options
@inherits Osirion.Blazor.Components.OsirionComponentBase
@inject CmsAdminState AdminState
@inject IAuthenticationService AuthService
@inject IOptions<CmsAdminOptions> AdminOptions

<AdminPage Title="Settings" Subtitle="Configuration">
@*     <BreadcrumbItems>
        @(new AdminLayout.BreadcrumbItem("Dashboard", "/admin"))
        @(new AdminLayout.BreadcrumbItem("Settings"))
    </BreadcrumbItems> *@
    
    <div class="osirion-admin-settings-page">
        <div class="osirion-admin-settings-header">
            <h2 class="osirion-admin-page-title">Settings</h2>
            <p class="osirion-admin-page-description">Configure your CMS settings.</p>
        </div>
        
        <div class="osirion-admin-settings-container">
            <div class="osirion-admin-card">
                <div class="osirion-admin-card-header">
                    <h3 class="osirion-admin-card-title">GitHub Configuration</h3>
                </div>
                <div class="osirion-admin-card-body">
                    <div class="osirion-admin-form-group">
                        <label class="osirion-admin-label">Owner</label>
                        <p class="osirion-admin-form-value">@AdminOptions.Value.Owner</p>
                    </div>
                    
                    <div class="osirion-admin-form-group">
                        <label class="osirion-admin-label">Default Repository</label>
                        <p class="osirion-admin-form-value">@(AdminOptions.Value.DefaultRepository ?? "Not set")</p>
                    </div>
                    
                    <div class="osirion-admin-form-group">
                        <label class="osirion-admin-label">Default Branch</label>
                        <p class="osirion-admin-form-value">@AdminOptions.Value.DefaultBranch</p>
                    </div>
                    
                    <div class="osirion-admin-form-group">
                        <label class="osirion-admin-label">Authentication Status</label>
                        <p class="osirion-admin-form-value">
                            @if (AuthService.IsAuthenticated)
                            {
                                <span class="osirion-admin-status-success">Authenticated as @AuthService.Username</span>
                            }
                            else
                            {
                                <span class="osirion-admin-status-error">Not authenticated</span>
                            }
                        </p>
                    </div>
                </div>
            </div>
            
            <div class="osirion-admin-card">
                <div class="osirion-admin-card-header">
                    <h3 class="osirion-admin-card-title">Content Settings</h3>
                </div>
                <div class="osirion-admin-card-body">
                    <div class="osirion-admin-form-group">
                        <label class="osirion-admin-label">Allowed File Extensions</label>
                        <p class="osirion-admin-form-value">
                            @foreach (var ext in AdminOptions.Value.AllowedFileExtensions)
                            {
                                <span class="osirion-admin-tag">@ext</span>
                            }
                        </p>
                    </div>
                    
                    <div class="osirion-admin-form-group">
                        <label class="osirion-admin-checkbox">
                            <input type="checkbox" checked="@AdminOptions.Value.AllowFileDelete" disabled />
                            <span>Allow File Deletion</span>
                        </label>
                    </div>
                    
                    <div class="osirion-admin-form-group">
                        <label class="osirion-admin-checkbox">
                            <input type="checkbox" checked="@AdminOptions.Value.AllowBranchCreation" disabled />
                            <span>Allow Branch Creation</span>
                        </label>
                    </div>
                    
                    <div class="osirion-admin-form-group">
                        <label class="osirion-admin-checkbox">
                            <input type="checkbox" checked="@AdminOptions.Value.AllowPullRequests" disabled />
                            <span>Allow Pull Requests</span>
                        </label>
                    </div>
                </div>
                
                <div class="osirion-admin-card-footer">
                    <p class="osirion-admin-card-footer-text">
                        Settings are defined in application configuration. 
                        See documentation for how to modify these settings.
                    </p>
                </div>
            </div>
            
            <div class="osirion-admin-card">
                <div class="osirion-admin-card-header">
                    <h3 class="osirion-admin-card-title">Theme Settings</h3>
                </div>
                <div class="osirion-admin-card-body">
                    <div class="osirion-admin-form-group">
                        <label class="osirion-admin-label">Theme</label>
                        <div class="osirion-admin-theme-selector">
                            <button type="button" 
                                    class="osirion-admin-button osirion-admin-button-theme @(Theme == "light" ? "active" : "")"
                                    @onclick="@(() => Theme = "light")">
                                <span class="osirion-admin-icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <circle cx="12" cy="12" r="5" />
                                        <line x1="12" y1="1" x2="12" y2="3" />
                                        <line x1="12" y1="21" x2="12" y2="23" />
                                        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64" />
                                        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78" />
                                        <line x1="1" y1="12" x2="3" y2="12" />
                                        <line x1="21" y1="12" x2="23" y2="12" />
                                        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36" />
                                        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22" />
                                    </svg>
                                </span>
                                Light
                            </button>
                            <button type="button" 
                                    class="osirion-admin-button osirion-admin-button-theme @(Theme == "dark" ? "active" : "")"
                                    @onclick="@(() => Theme = "dark")">
                                <span class="osirion-admin-icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z" />
                                    </svg>
                                </span>
                                Dark
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</AdminPage>

@code {
    [Parameter]
    public string Theme { get; set; } = "light";
    
    [Parameter]
    public EventCallback<string> ThemeChanged { get; set; }
    
    protected override void OnParametersSet()
    {
        // Set default theme
        if (string.IsNullOrEmpty(Theme))
        {
            Theme = "light";
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ThemeChanged.HasDelegate && !firstRender)
        {
            await ThemeChanged.InvokeAsync(Theme);
        }
    }
}