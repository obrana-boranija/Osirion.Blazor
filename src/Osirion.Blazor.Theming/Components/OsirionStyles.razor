@using Osirion.Blazor.Theming.Services
@inherits OsirionComponentBase
@inject IOptions<ThemingOptions>? Options
@inject IThemeService ThemeService
@implements IDisposable

@* Include core stylesheets *@
<link rel="stylesheet" href="_content/Osirion.Blazor.Core/css/index.css" />

@if (!EffectiveOptions.UseDefaultStyles)
{
    <link rel="stylesheet" href="_content/Osirion.Blazor.Theming/css/index.css" />
}

@* Apply custom variables *@
@if (!string.IsNullOrEmpty(CustomVariables))
{
    <style>
        :root {
        @((MarkupString)CustomVariables)
        }
    </style>
}

@* Apply generated theme variables *@
@if (!string.IsNullOrEmpty(GeneratedVariables))
{
    <style>
        :root {
        @((MarkupString)GeneratedVariables)
        }
    </style>
}

@* Framework integration script *@
@if (EffectiveOptions.Framework != CssFramework.None)
{
    <script id="osirion-framework-script">
        (function() {
            function applyFrameworkIntegration() {
                const htmlElement = document.documentElement || document.querySelector('html');
                const frameworkClass = "@GetFrameworkClass";

                if (htmlElement && frameworkClass && !htmlElement.classList.contains(frameworkClass)) {
                    htmlElement.classList.add(frameworkClass);
                }

                // Also apply data-bs-theme if Bootstrap is used
        @if (EffectiveOptions.Framework == CssFramework.Bootstrap)
        {
            <text>
                        const currentTheme = "@ThemeService.CurrentMode.ToString().ToLowerInvariant()";
                        if (currentTheme === "dark" || currentTheme === "light") {
                            htmlElement.setAttribute('data-bs-theme', currentTheme)
                        }
            </text>
        }
            }

            // Apply immediately
            applyFrameworkIntegration();

            // Apply on DOMContentLoaded for SSR scenarios
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', applyFrameworkIntegration);
            }

            // MutationObserver fallback for dynamic HTML changes
            const observer = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                        applyFrameworkIntegration();
                    }
                });
            });

            observer.observe(document.documentElement, {
                childList: true,
                subtree: true
            });
        })();
    </script>
}